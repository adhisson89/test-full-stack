type Query {
    findAllPostsByUserId(id: ID!): [PostResponse]
    findAllPosts: [PostResponse]
    findPublicPosts: [PostResponse]
    findUserById(id: ID!): UserResponse
    findAllUsers: [UserResponse]
}

type Mutation {
    login(username: String!, password: String!): AuthResponse
    refreshToken(refreshToken: String!): AuthResponse
    createPost(postRequest: PostRequestInput): PostResponse
    deletePostById(id: ID!): String
    createUser(userRequest: UserRequestInput): UserResponse
    deleteUserById(id: ID!): String
    updatePostById(postRequest: PostRequestInput): PostResponse
}

type AuthResponse {
    token: String!
    refreshToken: String!
}

input PostRequestInput {
    title: String!
    content: String!
    public: Boolean!
    userId: ID
    id: ID
}

type PostResponse {
    id: ID!
    title: String!
    content: String!
    isPublic: Boolean!
    userId: ID
}

input UserRequestInput {
    username: String!
    password: String!
    role: Role
    id: ID
}

type UserResponse {
    id: ID!
    username: String!
    role: Role
}

enum Role {
    ADMIN
    USER
}